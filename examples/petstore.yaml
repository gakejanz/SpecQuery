openapi: 3.0.0
info:
  title: PetStore API
  version: 1.0.0
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
servers:
  - url: https://petstore.swagger.io/v2
    description: Swagger Petstore
  - url: https://api.example.com/v1
    description: Example API
paths:
  /pets:
    get:
      tags: [Pets]
      operationId: getPets
      summary: Get all pets
      description: Returns all pets from the system that the user has access to
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [available, pending, sold]
        - name: limit
          in: query
          description: Maximum number of pets to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags: [Pets]
      operationId: createPet
      summary: Create a new pet
      description: Creates a new pet in the store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePetRequest"
      responses:
        "201":
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
  /pets/{petId}:
    get:
      tags: [Pets]
      operationId: getPetById
      summary: Get pet by ID
      description: Returns a single pet
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "404":
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags: [Pets]
      operationId: updatePet
      summary: Update pet
      description: Updates an existing pet
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePetRequest"
      responses:
        "200":
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "404":
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [Pets]
      operationId: deletePet
      summary: Delete pet
      description: Deletes a pet from the store
      parameters:
        - name: petId
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Pet deleted successfully
        "404":
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the pet
        name:
          type: string
          description: Pet's name
          minLength: 1
          maxLength: 100
        status:
          type: string
          enum: [available, pending, sold]
          description: Pet status in the store
        category:
          $ref: "#/components/schemas/Category"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        createdAt:
          type: string
          format: date-time
          description: When the pet was created
        updatedAt:
          type: string
          format: date-time
          description: When the pet was last updated
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    CreatePetRequest:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          description: Pet's name
          minLength: 1
          maxLength: 100
        status:
          type: string
          enum: [available, pending, sold]
          description: Pet status in the store
        categoryId:
          type: integer
          format: int64
          description: Category ID
        tagIds:
          type: array
          items:
            type: integer
            format: int64
          description: Tag IDs
    UpdatePetRequest:
      type: object
      properties:
        name:
          type: string
          description: Pet's name
          minLength: 1
          maxLength: 100
        status:
          type: string
          enum: [available, pending, sold]
          description: Pet status in the store
        categoryId:
          type: integer
          format: int64
          description: Category ID
        tagIds:
          type: array
          items:
            type: integer
            format: int64
          description: Tag IDs
    Error:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
    ValidationError:
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
          description: Validation error message
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string
